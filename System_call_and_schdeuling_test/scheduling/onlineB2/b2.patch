diff --git a/Makefile b/Makefile
index f8c820e..84d83a0 100644
--- a/Makefile
+++ b/Makefile
@@ -139,7 +139,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_testloop\
 
+	
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
 
@@ -160,7 +162,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..835d06e 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,7 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+void            setpriority();
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/proc.c b/kernel/proc.c
index 130d9ce..734fdf1 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -19,6 +19,7 @@ extern void forkret(void);
 static void freeproc(struct proc *p);
 
 extern char trampoline[]; // trampoline.S
+extern uint ticks;  
 
 // helps ensure that wakeups of wait()ing
 // parents are not lost. helps obey the
@@ -125,6 +126,9 @@ found:
   p->pid = allocpid();
   p->state = USED;
 
+  p->ticks = 0;
+  p->priority = 1000;
+
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
     freeproc(p);
@@ -454,7 +458,53 @@ scheduler(void)
     // processes are waiting.
     intr_on();
 
+    for(p = proc; p < &proc[NPROC]; p++) {
+      acquire(&p->lock);
+      if(p->state == RUNNABLE) {
+        if(ticks - p->last_scheduled >= 30) {
+          p->priority += 10;
+          p->last_scheduled = ticks;  
+          // printf("PID %d: Priority boosted to %d due to aging\n", p->pid, p->priority);
+        }
+      }
+      release(&p->lock);
+    }
+
+    loop:
     int found = 0;
+    int max_priority = -1;
+    struct proc *highest_priority_proc;
+
+    for(p = proc; p < &proc[NPROC]; p++) {
+      acquire(&p->lock);
+      if(p->state == RUNNABLE && p->priority >= max_priority) {
+        // Found a runnable process with higher priority.
+        max_priority = p->priority;
+        highest_priority_proc = p;
+      }
+      release(&p->lock);
+    }
+
+    if( max_priority != -1 ){
+      acquire(&highest_priority_proc->lock);
+      if(highest_priority_proc->state == RUNNABLE) {
+        // Switch to chosen process.  It is the process's job
+        // to release its lock and then reacquire it
+        // before jumping back to us.
+        highest_priority_proc->state = RUNNING;
+        c->proc = highest_priority_proc;
+        swtch(&c->context, &highest_priority_proc->context);
+
+        // Process is done running for now.
+        // It should have changed its p->state before coming back.
+        c->proc = 0;
+        found = 1;
+      }
+      release(&highest_priority_proc->lock);
+      goto loop;
+    }
+
+
     for(p = proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
       if(p->state == RUNNABLE) {
@@ -693,3 +743,17 @@ procdump(void)
     printf("\n");
   }
 }
+
+
+
+void 
+setpriority(){
+  int priority;
+  argint(0, &priority);
+
+  struct proc *p = myproc();
+  acquire(&p->lock);
+  p->priority = priority;
+  release(&p->lock);
+  printf("PID %d: Priority set to %d\n", p->pid, p->priority);
+}
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..1a8ffb8 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,8 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  int priority;
+  uint ticks;                   // Number of ticks used by the process
+  uint last_scheduled;         // Last time the process was scheduled
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..1f6f170 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_setpriority(void);
+extern uint64 sys_getpriority(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_setpriority] sys_setpriority,
+[SYS_getpriority] sys_getpriority,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..a79b79c 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_setpriority 22
+#define SYS_getpriority 23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..3e787f5 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -91,3 +91,17 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_setpriority(void)
+{
+  setpriority();
+  return 0;
+}
+
+uint64 
+sys_getpriority(void)
+{
+  struct proc *p = myproc();
+  return p->priority;
+}
\ No newline at end of file
diff --git a/kernel/trap.c b/kernel/trap.c
index d454a7d..58ac9fb 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -8,6 +8,7 @@
 
 struct spinlock tickslock;
 uint ticks;
+uint prevTicks = 0;
 
 extern char trampoline[], uservec[], userret[];
 
@@ -174,6 +175,16 @@ clockintr()
   // the interrupt request. 1000000 is about a tenth
   // of a second.
   w_stimecmp(r_time() + 1000000);
+
+  // struct proc *p = myproc();
+  // acquire(&p->lock);
+  // if(p && p->state == RUNNING){
+  //   p->ticks = ticks;
+  // }
+
+  // for(p = proc; p<&proc[NPROC]; p++) {
+
+  // }
 }
 
 // check if it's an external interrupt or software interrupt,
diff --git a/user/testloop.c b/user/testloop.c
new file mode 100644
index 0000000..3ab555d
--- /dev/null
+++ b/user/testloop.c
@@ -0,0 +1,26 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#define BYEL "\e[1;33m"
+#define BRED "\e[1;31m"
+#define CRESET "\e[0m"
+
+int main(int argc, char* argv[]){
+    int pid = getpid();
+    uint32 iters = atoi(argv[1]);
+    int priority = atoi(argv[2]);
+    setpriority(priority);
+    sleep(5); // to let the scheduler run and set the priority
+    int entry_time = uptime();
+    printf(BYEL "PID %d: Starting %u iterations at time %d. Initial priority: %d, current: %d\n" CRESET, pid, iters, entry_time, priority, getpriority());
+    for(int i = 0; i < iters; i++){
+        // do some dummy work
+        for(int j = 0; j < 50000000; j++){
+            int x = j * j;
+            x = x + 1;
+        }
+    }
+    int exit_time = uptime();
+    printf(BRED "PID %d: Finished at time %d. Initial pr: %d, current: %d\n" CRESET, pid, exit_time, priority, getpriority());
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index f16fe27..922377f 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+void setpriority(int);
+int getpriority(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..13f8654 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("setpriority");
+entry("getpriority");
\ No newline at end of file
